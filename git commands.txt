
remote = origin
local = upstream
git remote update ________________________________ //updates synchronously repo and local
git update-git-for-windows _______________________ //update git version
git remote -v  ___________________________________ //show origins
git remote _______________________________________ //show current origin
git ls-tree -r branch-name _______________________ //show whole files in specific branch



******************************** [ Add & Commit & Push]****************************
git add specifice_file ____________ //add one specific file to working_directory area
git add . _________________________ //add all to working_directory area
git commit -m "msg" _______________ //normy commit to stage area
git commit -a -m "msg" ____________ //make an add and message by one line to stage area
git push __________________________ //normy push to remote area
git push -f ________________________//force push to the active branch to remote area
git push -f origin target_branch __ //force push to specific branch to remote area
git push -u _______________________ //pull then push to remote area


****************************************[Restore]***********************************
git restore --stage  file.text ____ //restore file from stage area to locally unStaged to unTracked
git restore --stage * _____________ //restore all from stage area to locally unStaged to unTracked
git reset HEAD file_name __________ //restore file from stage area to locally unStaged to unTracked
git checkout -- file_name _________ //restore file from stage area to locally unStaged to unTracked
git clean -n ______________________ //delete whole dir but if u wanna except some file u could use [git add file.text] then clean the rest
git clean -df _____________________ //delete only unTracked files and directors  files&folders
git rm file_name __________________ //delete specific file from remote and local
git rm -rf ________________________ //remove files from stage-area
git rm --cached file_name _________ //delete specific file from only remote
git filter-branch -f --prune-empty --index-filter "git rm -r --cached --ignore-unmatch ./file_name" HEAD _ //delete file from whole repo all branches and history
    –force : quite self-explanatory, it forces the filter-branch to start even if it may not want to (given the documentation because it can contain temporary directories)
    –index-filter : option used in order to rewrite the index, exactly what we want in the case of a file deletion
    “git rm” command : the command to be executed on all branches, revisions and commits matching in the history, in this case it will remove the file from the repository and ignore files that don’t match
    –prune-empty : avoid having empty commits in the repository with zero files, this option will prune commits automatically


*****************************[Remove & Manipulate commits]*************************
gir log ____________________________________ //list of all commits 
git log --oneline __________________________ //list summary of all commits in one line individually 
git reflog _________________________________ //show loge of all operations [if u wanna to undo commit do - git checkout commit_hash then do -git branch backup to carry-on it ]
git log --stat _____________________________ //show what commits contains
git revert commit_hash _____________________ //revert the commit contains in new commit while keeping the original commit untouched [used if the orig commit already pushed & pulled]
git reset --hard HEAD~1 ____________________ //delete the last commit its will del any changes were in deleted commit
git reset --soft HEAD~1 ____________________ //delete the last commit but will keep the changed in Local but will del in remote 
git reset HEAD~1 ___________________________ //delete the last commit but will keep the changed in Local but will del in remote 
git reset --hard commit_hash_code __________ //delete specified commit by its hash-code also if were any commit above of it will be deleted
git reset --amend -m "new_rename_msg" ______ //rename last commit
git reset --amend __________________________ //add the edited files into last commit [in final type ":wq"]
git cherry-pick commit_hash_code ___________ //copy commit to another branch by switching to the target branch then cherry it
git rebase -i HEAD~3 _______________________ //Start Edit command page operation list to merge last 3 commits  {use "i" to edit & use ":wq" to exit }
git push origin branch_name -f _____________ //dont forget to update repo

git checkout reflog_hash_code ______________ //undo pacific operation then create branch to hold it in when u just create it will save into
git revert commit_hash_code ________________ //revers changes to original of this commit  [:wq]
git diff commit_hash another_commit_shash __ // show difference between two commits



********************************[New branch & change]****************************
git checkout --track origin/<BRANCH-NAME> ________ //
git branch _______________________________________ //show all branches
git branch -a ____________________________________ //show all branches status
git branch new_branch_name _______________________ //add new branch
git checkout branch-name _________________________ //switching to branch_name
git checkout -b name_the_new_branch ______________ //add new branch also switch to it
git checkout -b temporary-branch _________________ //add new temporary branch also switch to it
git branch -m new_branch_name_____________________ //rename current branch locally u have to push then
git push origin :old_branch_name new_branch_name _ //renaming branch in remote
git push remote -u new_branch_name _______________ //renaming branch in both remote and local synchronously 
git branch -d branch_name ________________________ //save_deleting branch_name at stage-area but must fully merged or non edited 
git branch -D branch_name ________________________ //force_deleting branch stage-area although if it edited without pushed or merge
git push origin --delete branch_name _____________ //delete remote branch
git remote prune origin __________________________ //update the local repo synchronously with remote



********************************[Merging & Rebase]****************************
git merge branch_name _____________ //merging branch_name into master but before it u have to switch master
git merge branch_name main ________ //merging branch_name into master by one line, its not merge commits it just made a refrence to it 
git rebase main ___________________ //merge onto main and keep branches commits with new tags while merge commit 
git rebase -i main ________________ //merge to main with cleared commit history
git log ___________________________ //show whole commits



Step 1: From your project repository, bring in the changes and test.
git fetch origin
git checkout -b v9_AppLang_with_devices origin/v9_AppLang_with_devices
git merge main

Step 2: Merge the changes and update on GitHub.

git checkout main
git merge --no-ff v9_AppLang_with_devices
git push origin main


*******************************[upload project into repo]**************************

git init __________________________________________________ //initializing into new local project
git add . _________________________________________________ // add all
git commit -m "bla bla" ___________________________________ //msg
git remote add origin git@github.com:<username>/<reponam> _ //add remote repo to new proj
git push origin main or master ____________________________ //pushing
git push -u origin main or master _________________________ //pull first then push

git remote set-url origin https://github.com/Mohammed-Saeed55/RunningTracking.git
git push --set-upstream origin development
git remote add service-center-app 'https://github.com/DeveloperAsela/service-centerapp.git'



***********************************[stash inventory]***********************************
git stash ____________________________ //save whole dir into stash-inventory
git stash save "stash_index_name"_____ //save whole dir into stash-inventory with naming it
git stash list _______________________ //show all the stash-inventory list 
git stash show stash@{index or name} _ //show specified stashed what its contained of
git stash pop ________________________ //restore & move the file at head of stashed-inventory at index[0]
git stash pop stash@{index or name} __ //restore & move specified stashed-inventory index
git stash pop apply __________________ //take acopy of the file at head of stashed-inventory at index[0]and restore it but its still in inventory
git stash clear ______________________ //delete and fully clear stash-inventory without restore
git stash drop stash@{index or name} _ //delete specified stashed from list



***********************************[virgin tages]***********************************
git tag _____________________________ //show whole tags
git tag tag_virgin_name _____________ //creat new tag
git tag push origin tage_name _______ //push to the tag




*************************[init new repo from local to remote]***************************
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/Mohammed-Saeed55/RunnerTracking.git
git push -u origin main

…or push an existing repository from the command line

git remote add origin https://github.com/Mohammed-Saeed55/RunnerTracking.git
git branch -M main
git push -u origin main



git bisect ??
git gitk ??


Monotype Corsiva
